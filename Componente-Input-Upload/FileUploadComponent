@using Genex.Planilhas
@using Genex.Utils.FileUpload
@inject IFileUpload uploadService
@inject IPlanilhasAppService planilhaService

//label com input
<Field Class="position-relative mb-0">

    <Label Class="mb-0 position-relative" @onclick="ClearFileUploadInput">
        <div class="">
            //mostra span
            <span class="btn btn-primary m-0 fs-5">
            //verifica se a variavel esta vazia 
            @if(!uploadInput.Any()){
                    //caso vazia mostra p
                    <p class="m-0 text-white">
                        <i class="fa-solid fa-download me-3"></i>
                        Carregar Arquivo
                    </p>

            }else{
                //se tiver item mostra p
                @foreach (var item in uploadInput)
                {
                        <p class="m-0 text-white w-100">@item.Name</p>
                }
            }
            </span>
        </div>
        //input escondido com position absolute
        //opacity 0 
        //top right 0
        //width height 0
        <InputFile multiple="@MultiplosArquivos" OnChange="FileUploadChanged" class="start-0 position-absolute opacity-0 top-0 right-0" style="width:0; height:0;"></InputFile>
    </Label>
</Field>

@code {
    const int FILE_MAX_SIZE = 1024000;

    private InputFile inputFile { get; set; }
    private int fileCount;
    private IReadOnlyList<IBrowserFile> uploadedFiles;
    private IBrowserFile browserFile;
    private List<FileUploadResponse> uploadResponse = new List<FileUploadResponse>();
    private List<FileInput> uploadInput = new List<FileInput>();
    private List<string> ArquivosCarregados { get; set; } = new List<string>();

    [Parameter]
    public bool MultiplosArquivos { get; set; } = false;
    [Parameter]
    public EventCallback<List<FileUploadResponse>> FilesChangedEventCallBack { get; set; }

    //função que limpa o label no evento do click 
    public void ClearFileUploadInput(){
        uploadInput.Clear();
    }


    //função que atribui os valores do arquivo a db 
    public async Task FileUploadChanged(InputFileChangeEventArgs e)
    {
        try
        {
            uploadInput.Clear();
            
            uploadedFiles = e.GetMultipleFiles();
            fileCount = e.FileCount;

            foreach (var item in uploadedFiles)
            {
                var file = new FileInput()
                    {
                        ContentType = item.ContentType,
                        Name = item.Name,
                        Content = new byte[item.Size]
                    };

                await item.OpenReadStream(FILE_MAX_SIZE).ReadAsync(file.Content);

                uploadInput.Add(file);
            }

            await UploadFilesToServer();

        }
        catch (Exception)
        {
            throw new Exception("Não foi possível fazer o upload do arquivo, tente novamente.");
        }
    }

    private async Task UploadFilesToServer()
    {

        var files = await uploadService.UploadAsync(uploadInput);

        await FilesChangedEventCallBack.InvokeAsync(files);

    }

}
